/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PhotoPanel.java
 *
 * Created on 5 Σεπ 2010, 10:44:29 μμ
 */
package tools.feeds;

import com.sun.syndication.feed.synd.SyndContentImpl;
import com.sun.syndication.feed.synd.SyndEntryImpl;
import java.awt.Color;
import java.awt.Dimension;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import myComponents.MyMessages;
import myComponents.myGUI.MyScrollableFlowPanel;
import tools.DesktopSupport;
import tools.options.Options;

/**
 *
 * @author lordovol
 */
public class FeedPanel extends javax.swing.JPanel implements Runnable {

  public static final int MIN_WIDTH = 360;
  public static final int MIN_HEIGHT = 160;
  public static final int MAX_HEIGHT = 300;
  public static final long serialVersionUID = 235346345645L;
  public static final Color BORDER_HIGHLIGHT_COLOR = Color.BLACK;
  public static final Color BORDER_MEDIUM_COLOR = Color.LIGHT_GRAY;
  private MyScrollableFlowPanel feedPanel;
  private int index;
  private SyndEntryImpl entry;
  private URI uri;
  private boolean isMinimized = true;
  private String title = "";
  private String titleCut = "";
  private String date = "";
  private String content = "";
  private String contentType = "text";
  private String TextContent = "";
  public static final int TITLE_MAX_LENGTH = 30;

  /** Creates new form PhotoPanel */
  public FeedPanel() {
    initComponents();
  }

  FeedPanel(MyScrollableFlowPanel feedPanel, SyndEntryImpl entry) {
    this.feedPanel = feedPanel;
    this.entry = entry;
    initComponents();
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    label_title = new javax.swing.JLabel();
    label_date = new javax.swing.JLabel();
    scroll = new javax.swing.JScrollPane();
    ep_content = new javax.swing.JEditorPane();
    bt_link = new javax.swing.JButton();
    bt_max = new javax.swing.JButton();

    setBackground(new java.awt.Color(255, 255, 255));
    setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    setPreferredSize(new java.awt.Dimension(360, 160));

    label_title.setBackground(new java.awt.Color(255, 255, 255));
    label_title.setFont(label_title.getFont().deriveFont(label_title.getFont().getStyle() | java.awt.Font.BOLD));
    label_title.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    label_title.setText("jLabel1");
    label_title.setOpaque(true);

    label_date.setFont(label_date.getFont().deriveFont((label_date.getFont().getStyle() | java.awt.Font.ITALIC) | java.awt.Font.BOLD, label_date.getFont().getSize()-1));
    label_date.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    label_date.setText("jLabel1");

    scroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    scroll.setViewportView(ep_content);

    bt_link.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/weblink.png"))); // NOI18N
    bt_link.setToolTipText("Vist webpage");
    bt_link.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
    bt_link.setBorderPainted(false);
    bt_link.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    bt_link.setIconTextGap(0);
    bt_link.setMargin(new java.awt.Insets(0, 0, 0, 0));
    bt_link.setOpaque(false);
    bt_link.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        bt_linkActionPerformed(evt);
      }
    });

    bt_max.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/maximize.png"))); // NOI18N
    bt_max.setToolTipText("Vist webpage");
    bt_max.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
    bt_max.setBorderPainted(false);
    bt_max.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    bt_max.setIconTextGap(0);
    bt_max.setMargin(new java.awt.Insets(0, 0, 0, 0));
    bt_max.setOpaque(false);
    bt_max.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        bt_maxActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addComponent(bt_link, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(bt_max, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 186, Short.MAX_VALUE)
            .addComponent(label_date, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
          .addComponent(label_title, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(12, 12, 12)
        .addComponent(label_title)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
        .addGap(1, 1, 1)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(label_date, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(bt_link)
          .addComponent(bt_max))
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

  private void bt_linkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_linkActionPerformed
    if (DesktopSupport.isDesktopSupport()) {
      try {
        DesktopSupport.getDesktop().browse(uri);
      } catch (IOException ex) {
        Logger.getLogger(FeedPanel.class.getName()).log(Level.SEVERE, null, ex);
      }
    } else {
      MyMessages.error("Visit Feed webpage", "Your OS doesn't support opening a browser window");
    }
  }//GEN-LAST:event_bt_linkActionPerformed

  private void bt_maxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_maxActionPerformed
    if (isMinimized) {
      setPreferredSize(new Dimension(getParent().getWidth(), MAX_HEIGHT));
      setMaximumSize(new Dimension(getParent().getWidth(), MAX_HEIGHT));
      bt_max.setIcon(new ImageIcon(getClass().getResource("/images/minimize.png")));
      label_title.setText(this.title);
      showHtml();
      isMinimized = false;
    } else {
      setPreferredSize(new Dimension(MIN_WIDTH, MIN_HEIGHT));
      setMaximumSize(new Dimension(MIN_WIDTH, MIN_HEIGHT));
      bt_max.setIcon(new ImageIcon(getClass().getResource("/images/maximize.png")));
      label_title.setText(this.titleCut);
      showText();
      isMinimized = true;
    }
    revalidate();
    repaint();
  }//GEN-LAST:event_bt_maxActionPerformed

  public void selectFeed() {
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton bt_link;
  private javax.swing.JButton bt_max;
  private javax.swing.JEditorPane ep_content;
  private javax.swing.JLabel label_date;
  private javax.swing.JLabel label_title;
  private javax.swing.JScrollPane scroll;
  // End of variables declaration//GEN-END:variables

  @Override
  public void run() {
    getData();
    label_title.setText(this.titleCut);
    label_date.setText(date);
    showText();
    setPreferredSize(new Dimension(MIN_WIDTH, MIN_HEIGHT));
    setMaximumSize(new Dimension(MIN_WIDTH, MIN_HEIGHT));
    feedPanel.add(this);
    feedPanel.revalidate();
    feedPanel.repaint();

  }

  private void getData() {
    title = entry.getTitle();
    titleCut = getTitleCut();
    date = getDate();
    content = getContent();
    TextContent = getTextContent();
    contentType = getContentType();
    uri = getUri();
  }

  private String getDate() {
    DateFormat df = new SimpleDateFormat(Options.toString(Options.DATE_FORMAT));
    if (entry.getPublishedDate() != null) {
      return df.format(entry.getPublishedDate());
    } else if (entry.getUpdatedDate() != null) {
      return df.format(entry.getUpdatedDate());
    }
    return "";

  }

  private String getContent() {
    if (entry.getDescription() != null) {
      return entry.getDescription().getValue();
    } else {
      List con = entry.getContents();
      if (con.size() > 0) {
        SyndContentImpl synd = (SyndContentImpl) con.get(0);
        return synd.getValue();
      }
    }
    return "";
  }

  private String getContentType() {
    if (entry.getDescription() != null) {
      return entry.getDescription().getType();
    } else {
      List con = entry.getContents();
      if (con.size() > 0) {
        SyndContentImpl synd = (SyndContentImpl) con.get(0);
        return synd.getType().indexOf("html") > -1 ? "text/html" : "text";
      }
    }
    return "text";
  }

  private URI getUri() {
    try {
      try {
        return new URL(entry.getLink()).toURI();
      } catch (URISyntaxException ex) {
        myseries.MySeries.logger.log(Level.SEVERE, null, ex);
        return null;
      }
    } catch (MalformedURLException ex) {
      myseries.MySeries.logger.log(Level.SEVERE, null, ex);
      return null;
    }
  }

  private String getTextContent() {
    return content.toString().replaceAll("\\<.*?>", "");

  }

  private void showHtml() {
    ep_content.setContentType(contentType);
    ep_content.setText(content);
  }

  private void showText() {
    ep_content.setContentType("text");
    ep_content.setText(TextContent);
  }

  private String getTitleCut() {
    String cut = "";
    String[] titleArr = title.split(" ", -1);
    for (int i = 0; i < titleArr.length; i++) {
      String t = titleArr[i];
      if (cut.length() < TITLE_MAX_LENGTH) {
        cut += t +" ";
      }
    }
    return cut.trim().length() < title.trim().length() ? cut.trim() + "..." : cut.trim();
  }
}

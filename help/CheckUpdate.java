/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CheckUpdate.java
 *
 * Created on 23 Ιαν 2009, 10:50:03 πμ
 */
package help;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import myComponents.MyDraggable;
import myComponents.MyUsefulFunctions;
import myseries.*;
import tools.DesktopSupport;

/**
 *
 * @author ssoldatos
 */
public class CheckUpdate extends MyDraggable {

  private boolean isConected;
  private Update up;
  private static final long serialVersionUID = 34646758678L;

  /** Creates new form CheckUpdate */
  public CheckUpdate() {
    initComponents();
    panel_download.setVisible(false);

    if (check()) {
      MySeries.logger.log(Level.INFO, "Checking updates");
      up = new Update();
      Thread t = new Thread(up);
      t.start();
    }
    setLocationRelativeTo(null);
    setVisible(true);
  }

  class Update implements Runnable {

    protected String latestVersionData[] = new String[2];
    private String currentVersion;

    public void run() {
      try {
        latestVersionData = getLatestVersion();
        if (latestVersionData != null) {
          currentVersion = MySeries.version;
          label_latestVersion.setText(latestVersionData[1]);
          System.out.println(latestVersionData[1]);
          System.out.println(latestVersionData[2]);
          if (currentVersion.compareTo(latestVersionData[1]) < 0) {
            label_needUpdate.setText("An update is found");
            label_needUpdate1.setText("Click on the icon to download it.");
            panel_download.setVisible(true);
            button_download.setEnabled(true);
          } else {
            label_needUpdate.setText("You are up to date!!!");
          }
        } else {
          MySeries.logger.log(Level.WARNING, "Can't get the update data");
          label_needUpdate.setText("Can't get the update data!!!");
        }
      } catch (MalformedURLException ex) {
        MySeries.logger.log(Level.WARNING, null, ex);
        label_needUpdate.setText("Can't connect to server!!!");
      } catch (IOException ex) {
        MySeries.logger.log(Level.WARNING, null, ex);
        label_needUpdate.setText("Can't connect to server!!!");
      }
    }

    private String[] getLatestVersion() throws MalformedURLException, IOException {
      URL v = new URL("http://sites.google.com/site/myjseries/version");
      BufferedReader in = new BufferedReader(new InputStreamReader(v.openStream()));
      label_needUpdate.setText("Connected to server!!!");
      String inputLine;
      while ((inputLine = in.readLine()) != null) {
        if (inputLine.startsWith("<div dir=\"ltr\">version")) {
          inputLine = MyUsefulFunctions.stripHTML(inputLine);
          in.close();
          progressBar_checkUpdates.setIndeterminate(false);
          progressBar_checkUpdates.setString("");
          String[] vars = inputLine.split("\\$", -1);
          return vars;
        }
      }
      return null;
    }
  }

  private boolean check() {
    MyUsefulFunctions.initInternetConnection();
    isConected = MyUsefulFunctions.hasInternetConnection();
    if (!isConected) {
      MySeries.logger.log(Level.WARNING, "Could not connect to internet");
      MyUsefulFunctions.error("No Internet Connection!!!", "Could not connect to internet\nIf you are behind a proxy check your proxy settings in options");
      return false;
    }
    return true;
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    label_currentVersion = new javax.swing.JLabel();
    label_latestVersion = new javax.swing.JLabel();
    progressBar_checkUpdates = new javax.swing.JProgressBar();
    button_close = new javax.swing.JButton();
    panel_download = new javax.swing.JPanel();
    button_download = new javax.swing.JButton();
    jPanel3 = new javax.swing.JPanel();
    label_needUpdate = new javax.swing.JLabel();
    label_needUpdate1 = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    setTitle("Check for  updates");

    jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jPanel1.setPreferredSize(new java.awt.Dimension(300, 196));

    jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | java.awt.Font.BOLD, jLabel1.getFont().getSize()+2));
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("MySeries - Checking for updates");

    jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel2.setText("Current version :");

    jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel3.setText("Latest version :");

    label_currentVersion.setText(MySeries.version);

    label_latestVersion.setText(" ");

    progressBar_checkUpdates.setIndeterminate(true);
    progressBar_checkUpdates.setString("Checking for updates");
    progressBar_checkUpdates.setStringPainted(true);

    button_close.setText("Close");
    button_close.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        button_closeActionPerformed(evt);
      }
    });

    button_download.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save.png"))); // NOI18N
    button_download.setToolTipText("Download Update");
    button_download.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
    button_download.setEnabled(false);
    button_download.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        button_downloadActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout panel_downloadLayout = new javax.swing.GroupLayout(panel_download);
    panel_download.setLayout(panel_downloadLayout);
    panel_downloadLayout.setHorizontalGroup(
      panel_downloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panel_downloadLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(button_download, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    panel_downloadLayout.setVerticalGroup(
      panel_downloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_downloadLayout.createSequentialGroup()
        .addContainerGap(20, Short.MAX_VALUE)
        .addComponent(button_download)
        .addContainerGap())
    );

    label_needUpdate.setText(" ");

    label_needUpdate1.setText(" ");

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel3Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
          .addComponent(label_needUpdate1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(label_needUpdate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel3Layout.setVerticalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel3Layout.createSequentialGroup()
        .addComponent(label_needUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(label_needUpdate1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(panel_download, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(button_close))
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(33, 33, 33)
            .addComponent(progressBar_checkUpdates, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
              .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(label_currentVersion, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                  .addComponent(label_latestVersion, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE))))))
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel2)
          .addComponent(label_currentVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(label_latestVersion))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(progressBar_checkUpdates, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
          .addComponent(panel_download, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(button_close)
        .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void button_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_closeActionPerformed
      MySeries.glassPane.deactivate();
      dispose();
    }//GEN-LAST:event_button_closeActionPerformed

    private void button_downloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_downloadActionPerformed
    try {
      URI download = new URI(up.latestVersionData[2]);
      if(DesktopSupport.isBrowseSupport()){
        try {
          DesktopSupport.getDesktop().browse(download);
        } catch (IOException ex) {
          Logger.getLogger(CheckUpdate.class.getName()).log(Level.SEVERE, null, ex);
        }
      } else {
        MyUsefulFunctions.error("Browsing not supported", "Opening a browser window is not supported in your OS");
        MySeries.logger.log(Level.WARNING, "Opening a browser window is not supported in your OS");
      }
    } catch (URISyntaxException ex) {
      Logger.getLogger(CheckUpdate.class.getName()).log(Level.SEVERE, null, ex);
    } 
    }//GEN-LAST:event_button_downloadActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton button_close;
  private javax.swing.JButton button_download;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JLabel label_currentVersion;
  private javax.swing.JLabel label_latestVersion;
  private javax.swing.JLabel label_needUpdate;
  private javax.swing.JLabel label_needUpdate1;
  private javax.swing.JPanel panel_download;
  private javax.swing.JProgressBar progressBar_checkUpdates;
  // End of variables declaration//GEN-END:variables
}
